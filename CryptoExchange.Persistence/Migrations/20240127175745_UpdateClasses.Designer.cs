// <auto-generated />
using System;
using CryptoExchange.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CryptoExchange.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240127175745_UpdateClasses")]
    partial class UpdateClasses
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CryptoExchange.Domain.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 1, 27, 17, 57, 45, 733, DateTimeKind.Utc).AddTicks(9759),
                            DateModified = new DateTime(2024, 1, 27, 17, 57, 45, 733, DateTimeKind.Utc).AddTicks(9794),
                            Name = "USDT"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 1, 27, 17, 57, 45, 733, DateTimeKind.Utc).AddTicks(9796),
                            DateModified = new DateTime(2024, 1, 27, 17, 57, 45, 733, DateTimeKind.Utc).AddTicks(9797),
                            Name = "BTC"
                        });
                });

            modelBuilder.Entity("CryptoExchange.Domain.ExchangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Approved")
                        .HasColumnType("boolean");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("boolean");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<double>("CurrencyForExchangeAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("CurrencyForExchangeId")
                        .HasColumnType("integer");

                    b.Property<double>("CurrencyToExchangeAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("CurrencyToExchangeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("ReceivedCustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestedCustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyForExchangeId");

                    b.HasIndex("CurrencyToExchangeId");

                    b.ToTable("ExchangeRequests");
                });

            modelBuilder.Entity("CryptoExchange.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CryptoExchange.Domain.ExchangeRequest", b =>
                {
                    b.HasOne("CryptoExchange.Domain.Currency", "CurrencyForExchange")
                        .WithMany()
                        .HasForeignKey("CurrencyForExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoExchange.Domain.Currency", "CurrencyToExchange")
                        .WithMany()
                        .HasForeignKey("CurrencyToExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyForExchange");

                    b.Navigation("CurrencyToExchange");
                });

            modelBuilder.Entity("CryptoExchange.Domain.Order", b =>
                {
                    b.HasOne("CryptoExchange.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });
#pragma warning restore 612, 618
        }
    }
}
